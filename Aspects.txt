https://www.javaworld.com/article/2073918/core-java/i-want-my-aop---part-1.html
https://doanduyhai.wordpress.com/2011/12/05/advanced-aspectj-part-i-instanciation-model/

Concerns like security cut across the natural units of modularity. For object-oriented programming languages, the natural unit of modularity
is the class. But in object-oriented programmming languages, crosscutting concerns are not easily turned into classes precisely because they
cur across classes, and so these aren't reusable, they can't be refined or inherited, they are spread through out the program in an undisciplined 
way, in short, they are difficult to work with.

Since most systems include crosscutting concerns, it's no supprise that a few
techniques have emerged to modularize their implementation. Such techniques 
include mix-in classes, design patterns, and domain-specific solutions.

With mix-in classes you can differ a concerns final implementation. 
The primary class contains a mix-in class instance and allows the systems 
other parts to set the instance.
In credit card example, the class implementing business logic composes a logger.
Another part of the system could set this logger to get the appropriate
logging type. The logger could be set to log using a filesystem or messaging
middleware. Although the nature of logging is now deffered, the composer
nevertheless contains the code to invoke logging operations at all log
points and controls the logging information.

Behavioral design patterns, like Visitor and Template Method, let you defer
implementation. However, just in case with mix-ins, the control of the 
operation -- invoking visiting logic or invoking template methods -- stays 
within the main classes.

Domain specific solutions, such as frameworks and application servers, let
developers address some crosscutting concerns in a modularized way. The
EJB architecute addresses crossuctting concerns such as security, administration
performance, and container-managed persistence. Bean developers focus on the business
logic, while the deployment developers focus on deployment issues,such as bean-data
mapping to a database.

AOP lets you implement individual concerns in a locally coupled fashion,
and combine these implementations to form the final system.
AOP differs most from OOP in the way it addresses crosscutting concerns. With
AOP, each concern's implementation remains unaware that other concerns are
"aspecting" it. Example, credit card processign module doesn't know that the other
concerns are logging or authenticating its operations.

At high level, an AOP language specifies two components:
        - Implementation of concerns, mapping of individual requirement into code
          so that compiler can translate it into executable code.
        - Weaving rules specification, how to compose independently implemented concerns
          to form the final system.

In addition, AspectJ also allows the aspecting of other aspects and classes in several ways.
The each concern's implementation is oblivious to the fact that it is being aspected by other
concerns.
You can introduce new data members and new methods, as well as declare a class to implement
additional base classes and interfaces.

Join points - define specific points in a program's execution. Joinpoints could define calls to
specific methods in a class. Candidate joinpoints include calls to a method, a conditional check,
a loop's beginning, or an assignment. Joinpoints also have a context associated with them.
A method-call joinpoint could have the target object and its argument as part of the context.
Pointcut - is the language construct that specifies Joinpoint or specify joinpoint collection.
It collects specific context at those points, it let you expose context at the joinpoint to an
advice implementation.
Advice - defines pieces of an aspect implementation to be executed at pointcuts.
Aspect - combines these primitives.

A join point is some point in the execution of a program together with a view into the execution context when that point occurs.
Join points are picked out by pointcuts. When a program reaches a join point, advice on that join point may run,
in addition to (or instead of) the join point itself. 

>>>>>
Named pointcuts explicitly specify their names.You can reuse such pointcuts for defining other pointcuts,
defining part of an advice, overriding a pointcut ...
Annonymous pointcuts become defined at the point of their usage, in advice specification or as a part of
some other pointcut's definition, and cannot be reused.

>>>>>
Advice implementations often require access to data at the joinpoint. For example, to log certain operations,
an advice might need information, called context, about a method and arguments to it.
Pointcuts, therefore, allow exposure of the context at the execution point to pass to an advice implementation.
AspectJ offers target(), this(), and args() pointcuts to collect the context.
Pointcut not only pick out join points, they can also expose part of the execution context at their join points.
Values exposed by a pointcut can be used in the body of advice declarations.

>>>>>
AspectJ supports a limited form of reflection.Each advice body has access to sa special object, thisJoinPoint,
which contains the information about the joinpoint.

The type of thisJoinPoint includes a rich reflective class hierarchy of signatures, and can be used to access both static and dynamic information
about join points such as the arguments of the join point: 
thisJoinPoint.getArgs()

In addition, it holds an object consisting of all the static information about the join point such as corresponding line number and static signature:
thisJoinPoint.getStaticPart()

If you only need the static information about the join point, you may access the static part of the join point directly with the special variable
thisJoinPointStaticPart. Using thisJoinPointStaticPart will avoid the run-time creation of the join point object that may be necessary
when using thisJoinPoint directly. 

It is always the case that 
thisJoinPointStaticPart == thisJoinPoint.getStaticPart()
thisJoinPoint.getKind() == thisJoinPointStaticPart.getKind()
thisJoinPoint.getSignature() == thisJoinPointStaticPart.getSignature()
thisJoinPoint.getSourceLocation() == thisJoinPointStaticPart.getSourceLocation()


>>>>>
Advices specify the executable code when reaching certain pointcuts. AspectJ provides three ways to associate an advice with a joinpoint:
before, after, and around a joinpoint's execution.
A before advice runs just before the joinpoint, whereas an after advice runs just after.
With an after advice, you can specify after normal return, after throwing an exception, or after returning either way from a joinpoint.
An around advice surrounds a joinpoint and has control if the joinpoint's execution should proceed. It can also decide to proceed with
a different argument set.

>>>>>
Aspect puts together pointcuts and advices.
Aspects resemble clasess: an aspect can contain methods and fields, extend other classes or aspects and implement
interfaces. Aspects differ from classes in that you cannot create an object from an aspect using new().

AspectJ allows classes to declare pointcuts. You must declare "static" pointcuts declared inside a class.
However, AspectJ doesn't allow classes to contain advices; only aspects can contain advices.

An aspect can mark itself and any pointcut as abstract. Abstract pointcuts act similarly to a class's abstract methods,
they let you defer the details to the derived aspects. A concrete aspect extending an abstract aspect can then provide 
concrete definitions of abstract pointcuts

You can define aspect as inner class (or inner aspect) of the class, But aspect must be declared as 'static'

>>>>>
Like classes, aspects may be instantiated, but aspectJ controls how that instantiation happens - so you can't use Java's "new" form
to build new aspect instances. By default, each aspect is a singleton, so one aspect instance is created. This means that advice may
use non-static fields of the aspect. if it meeds to keep state around:

aspect Logging {
    OutputStream logStream = System.err;

    before(): move() {
        logStream.println("about to move");
    }
}


>>>>>
AspectJ lets you introduce methods or fields to classes and interfaces.
Interestingly, AspectJ lets you introduce method implementations and fields into interfaces.
You can, for example, provide a default implementation of a few methods in an interface.
aspect IntroduceMethodIllustration {
        private void MyClass.foo() { 
                System.out.println("This is foo");
        }
        private static int MyClass.instanceCount = 0;
}

With AspectJ, you can modify an existing class's inheritance hierarchy. Using these constructs, you can declare
super classes and interfaces of an existing class or interface.
aspect MakeMyClassSerializable {
        declare parents : MyClass implements Serializable;
}

AspectJ can soften a checked exception into an unchecked exception for a particular method set. Such methods then behave
as if they've thrown an unchecked exception of type org.aspectj.lang.SoftException, which wraps the original exception.
aspect SoftenDateFetcherRemoteException {
        declare soft : 
            RemoteException : (call(public * DateFetcher.*(..))
                               || call(public DateFetcherImpl.new(..)))
                              && within(Test);
}

Other AspectJ features:
        - You can declare one aspect as dominant over others to control precedence when multiple aspects
          affect a certain pointcut.
        - By default, AspectJ associates aspects with other classes and aspects, and therefore all aspectee
          instances share the aspect's state. Beyond the default association type, AspectJ offers additional
          types: perthis, pertarget, percflow, and percflowbelow. Each associates a separate aspect instance
          with a self object, target object, control flow, and control flow excluding the pointcut, respectively.
        - You can mark an aspect privileged, which gives it access to the private members of aspected classes.

>>>>
call vs execute
Firstly, the lexical pointcut declarations within and withincode match differently. At a call join point,
the enclosing code is that of the call site. This means that call(void m()) && withincode(void m()) will only capture
directly recursive calls, for example. At an execution join point, however, the program is already executing the method,
so the enclosing code is the method itself: execution(void m()) && withincode(void m()) is the same as execution(void m()). 
Secondly, the call join point does not capture super calls to non-static methods. This is because such super calls are different in Java,
since they don't behave via dynamic dispatch like other calls to non-static methods.
 
>>>>
One best practice in AspectJ is to declare a special aspect whose task consists simply of declaring precedence for other aspects.
Actually it doesn't work with abstract aspects
public aspect MyAspectOrdering{
	declare precedence: EventListenerWeakening,EventListenerUniqueness;
}

>>>>
AspectJ can only work with what it is told, and for optimal performance of matching the user should think about what they are trying
to achieve and narrow the search space for matches as much as they can in the definition. Basically there are three kinds of pointcut
designator: kinded, scoping and context: 

• Kinded designators are those which select a particular kind of join point. For example: execution, get, set, call, handler 
• Scoping designators are those which select a group of join points of interest (of probably many kinds). For example: within, withincode 
• Contextual designators are those that match (and optionally bind) based on context. For example: this, target, @annotation 

A well written pointcut should try and include at least the first two types (kinded and scoping), whilst the contextual designators may be
included if wishing to match based on join point context, or bind that context for use in the advice. Supplying either just a kinded designator
or just a contextual designator will work but could affect weaving performance (time and memory used) due to all the extra processing and analysis.
Scoping designators are very fast to match, they can very quickly dismiss groups of join points that should not be further processed - that is
why a good pointcut should always include one if possible. 

>>>>
pointcut goCut(): cflow(this(Demo) && execution(void go()));

Object around(): demoExecs() && !execution(* go()) && goCut() {

}

The pointcut goCut is defined as 
cflow(this(Demo)) && execution(void go())
so that only executions made in the control flow of Demo.go are intercepted. The control flow from the method go includes the execution of go itself,
so the definition of the around advice includes !execution(* go()) to exclude it from the set of executions advised. 

>>>>
Usage
Logging and debugging
Using AspectJ for logging and debugging also lets you log different contextual information without touching the main code.

Design by contract (DBC)
DB>C> requires explicit contracts that must hold true at various execution points, such as before and after each operation.
You can use AspectJ to enforce DBC by creating aspects containing advices to check contracts at required execution points.
If you wish to not enforce contracts in a production environment, simply exclude DBC aspects from your production build.

Lazy creation/initialization
It's common to optimize memory-intensive objects by lazily creating them. As with other optimizations, you'd use lazy instantiation
because of profiling. However, it's invasive to change your implementation everywhere to lazily create certain fields. At the most, 
OOP only can require programmers to always use a "get>Field>()" method and modularize logic for "create-if-needed" in that
method. With that approach, if a programmer forgets to use this method and does a direct access, a crash awaits. Marking such 
fields with private access does not help for in-class field access.Even if you discover the need earlier during the design phase
and the problem mentioned above is unimportant, it is nice to separate optimization concerns to avoid overloading the main 
implementation logic.
AspectJ's "get()" pointcut lets you capture access to a field. You can advise such a pointcut to create an object if the field was null.
With this,  the logic if checking for null and creating an object if needed is modularized.

Caching
High performance applications need to cache expensive-to-create objects. For example, a server serving images, say stock charts,
may need to cache byte-stream image representations. With AspectJ, you capture image creation joinpoints, looking into the cache for an
available image for some given data, then using the cached image instead. If no such image is available, the advice to such joinpoints 
creates an image and stores it in a hash table. The caching implementation could also employ a soft reference or some other scheme to 
ensure cached images do not cause the application to starve for memory. y using AspectJ, you can make noninvasive changes if the caching
logic needs to change.

>>>>>
Maven + Eclipse
https://github.com/Barlog-M/aspectj-maven-example/blob/compile-time-weaving/pom.xml
https://stackoverflow.com/questions/30413186/nosuchmethoderror-with-aspectj


<!-- Spring AOP + AspectJ -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjrt</artifactId>
    <version>1.8.1</version>
</dependency>
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-aop</artifactId>
    <version>4.0.4.RELEASE</version>
</dependency>
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.8.1</version>
</dependency>
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjtools</artifactId>
    <version>${aspectj.version}</version>
</dependency>

    <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>aspectj-maven-plugin</artifactId>
        <version>1.7</version><!-- AspectJ weaver plugin 7 is for java 8 (version 1.6 is for java 7) -->
        <configuration>
            <complianceLevel>1.8</complianceLevel>
            <source>1.8</source>
            <target>1.8</target>
        </configuration>				
        <executions>
            <execution>
                <goals>
                    <goal>compile</goal>      
                    <goal>test-compile</goal>  
                </goals>
            </execution>
        </executions>
    </plugin> 
</plugins>


        <pluginManagement>
            <plugins>
<!--This plugin's configuration is used to store Eclipse m2e settings
only. It has no influence on the Maven build itself. -->
                <plugin>
                    <groupId>org.eclipse.m2e</groupId>
                    <artifactId>lifecycle-mapping</artifactId>
                    <version>1.0.0</version>
                    <configuration>
                        <lifecycleMappingMetadata>
                            <pluginExecutions>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>org.codehaus.mojo</groupId>
                                        <artifactId>aspectj-maven-plugin</artifactId>
                                        <versionRange>1.7</versionRange>
                                        <goals>
                                            <goal>compile</goal>
                                            <goal>test-compile</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <execute />
                                    </action>
                                </pluginExecution>
                            </pluginExecutions>
                        </lifecycleMappingMetadata>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

<<<<<
